#
# The material contained herein is not a license, either      
# expressly or impliedly, to any intellectual property owned  
# or controlled by any of the authors or developers of this   
# material or to any contribution thereto. The material       
# contained herein is provided on an "AS IS" basis and, to the
# maximum extent permitted by applicable law, this information
# is provided AS IS AND WITH ALL FAULTS, and the authors and  
# developers of this material hereby disclaim all other       
# warranties and conditions, either express, implied or       
# statutory, including, but not limited to, any (if any)      
# implied warranties, duties or conditions of merchantability,
# of fitness for a particular purpose, of accuracy or         
# completeness of responses, of results, of workmanlike       
# effort, of lack of viruses and of lack of negligence, all   
# with regard to this material and any contribution thereto.  
# Designers must not rely on the absence or characteristics of
# any features or instructions marked "reserved" or           
# "undefined." The Unified EFI Forum, Inc. reserves any       
# features or instructions so marked for future definition and
# shall have no responsibility whatsoever for conflicts or    
# incompatibilities arising from future changes to them. ALSO,
# THERE IS NO WARRANTY OR CONDITION OF TITLE, QUIET ENJOYMENT,
# QUIET POSSESSION, CORRESPONDENCE TO DESCRIPTION OR          
# NON-INFRINGEMENT WITH REGARD TO THE TEST SUITE AND ANY      
# CONTRIBUTION THERETO.                                       
#                                                             
# IN NO EVENT WILL ANY AUTHOR OR DEVELOPER OF THIS MATERIAL OR
# ANY CONTRIBUTION THERETO BE LIABLE TO ANY OTHER PARTY FOR   
# THE COST OF PROCURING SUBSTITUTE GOODS OR SERVICES, LOST    
# PROFITS, LOSS OF USE, LOSS OF DATA, OR ANY INCIDENTAL,      
# CONSEQUENTIAL, DIRECT, INDIRECT, OR SPECIAL DAMAGES WHETHER 
# UNDER CONTRACT, TORT, WARRANTY, OR OTHERWISE, ARISING IN ANY
# WAY OUT OF THIS OR ANY OTHER AGREEMENT RELATING TO THIS     
# DOCUMENT, WHETHER OR NOT SUCH PARTY HAD ADVANCE NOTICE OF   
# THE POSSIBILITY OF SUCH DAMAGES.                            
#                                                             
# Copyright 2006, 2007, 2008, 2009, 2010 Unified EFI, Inc. All
# Rights Reserved, subject to all existing rights in all      
# matters included within this Test Suite, to which United    
# EFI, Inc. makes no claim of right.                          
#                                                             
# Copyright (c) 2010, Intel Corporation. All rights reserved.<BR> 
#
#
#/*++
#
# Module Name:
#
#    CommonTools.env
#
#  Abstract:
#
#    This file should not need to be customized. Customizations should
#    be done in LocalTools.env if at all possible.
#
#    This file can be included by other makefiles.
#
#    It defines variables used by the different toolchains. It first includes
#    the user-customized LocalTools.env, and then uses those defines to
#    define other variables.
#
#    It basically has sections for different toolchains which define variables
#    used to build.
#
#--*/

#
# Everything depends on EFI_SOURCE. Make sure it's defined
#
!IFNDEF EFI_SOURCE
!ERROR EFI_SOURCE environmental variable not set
!ENDIF

#
# Tools depend on BUILD_DIR. Make sure it's defined
#
!IFNDEF BUILD_DIR
!ERROR BUILD_DIR environmental variable not set.  Should be set in PlatformTools.env
!ENDIF

################################################################################
#
# Define paths for EFI build tools
#
################################################################################
!IFNDEF EFI_TOOLS_PATH
EFI_TOOLS_BIN     = $(EFI_SOURCE)\Tools\Bin
!ELSE
EFI_TOOLS_BIN     = $(EFI_TOOLS_PATH)\Bin
!ENDIF

!IFNDEF EDK_TOOLS_BIN
EDK_TOOLS_BIN     = $(EFI_TOOLS_BIN)
!ENDIF

# 
# Customize to define the base path to the EBC tools
#
!IFNDEF EBC_TOOLS_PATH
EBC_TOOLS_PATH  = c:\progra~1\intel\ebc
!ENDIF

EDK_TOOLS_DIR       = $(EDK_SOURCE)\Sample\Tools
EDK_TOOLS_SOURCE    = $(EDK_TOOLS_DIR)\Source
EDK_TOOLS_COMMON    = $(EDK_TOOLS_DIR)\Source\Common
EDK_TOOLS_OUTPUT    = $(BUILD_DIR)\Tools
PCCTS_DIR           = $(EDK_SOURCE)\Other\Maintained\Tools\Pccts
SHELL_SOURCE        = $(EFI_SOURCE)\EDK\Other\Maintained\Application\Shell
TEST_TOOLS_SOURCE   = $(EFI_SOURCE)\Platform\$(PROJECT_FAMILY)\Tools\Source
TEST_TOOLS_OUTPUT   = $(BUILD_DIR)\Tools

#
# Specify where the build process should put your PDB files.
# Shorten this path to make your images a bit smaller.
#
PDB_OUTPUT_PATH     = $(BUILD_DIR)\$(PROCESSOR)

#
# Macros to define the build tools
#
HIIPACK         = $(EDK_TOOLS_OUTPUT)\HiiPack
ANTLR           = $(PCCTS_DIR)\bin\antlr
DLG             = $(PCCTS_DIR)\bin\dlg
FWIMAGE         = $(EDK_TOOLS_OUTPUT)\FwImage
GENFDIMAGE      = $(EDK_TOOLS_OUTPUT)\GenFdImage
GENFFSFILE      = $(EDK_TOOLS_OUTPUT)\GenFfsFile
GENFVIMAGE      = $(EDK_TOOLS_OUTPUT)\GenFvImage
GENSECTION      = $(EDK_TOOLS_OUTPUT)\GenSection
GUIDCHK         = $(EDK_TOOLS_OUTPUT)\GuidChk
MAKEDEPS        = $(EDK_TOOLS_OUTPUT)\MakeDeps
PROCESSDSC      = $(EDK_TOOLS_OUTPUT)\ProcessDsc
STRGATHER       = $(EDK_TOOLS_OUTPUT)\StrGather
SETSTAMP        = $(EDK_TOOLS_OUTPUT)\SetStamp
VFRCOMPILE      = $(EDK_TOOLS_OUTPUT)\VfrCompile
GENBIN          = $(TEST_TOOLS_OUTPUT)\GenBin

MAKE            = nmake -nologo

###############################################################################
#
# Settings for building drivers for IA32 using MS Visual Studio.
#
# These VC++ tools settings are used to build drivers for IA32 using MS Visual C.
#  this path assumes you have run VCVARS32.BAT and the MSVS tools are in your
#  path.
#
###############################################################################
!IF "$(TOOLCHAIN)" == "TOOLCHAIN_MSVC_IA32"

CC                  = cl
LINK                = link
LIB                 = link /lib
ASM                 = ml
ASMLINK             = $(LINK)

RC                  = rc

CC_FLAGS            = /nologo /X /D EFI32 /W4 /WX /GX /Gy /c /Fo$@ $(INC) /D ENTS_OUTPUT
ASM_FLAGS           = /nologo /W3 /WX /c /coff /Fo$@ /DEFI32 $(INC)
LINK_FLAGS          = /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB /IGNORE:4086 /MAP /OPT:REF /MACHINE:I386 /DLL /BASE:0
LIB_FLAGS           = /NOLOGO

#
# Set additional build flags for compiler/assembler/linker when debug is enabled
#
!IF "$(EFI_DEBUG)" == "YES"
ASM_FLAGS       = $(ASM_FLAGS) /Zi /DDEBUG
CC_FLAGS        = $(CC_FLAGS) /Zi /Gm /D EFI_DEBUG
LINK_FLAGS      = $(LINK_FLAGS) /DEBUG
!ENDIF

###############################################################################
#
# Settings for MS Visual Studio when building the Tiano build tools.
#  this path assumes you have run VCVARS32.BAT and the MSVS tools are in your
#  path.
#
###############################################################################
!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_MSVC"

CC                  = cl
LINK                = link
LIB_EXE             = lib

CC_FLAGS            = /nologo /W4 /WX /GX /Gy /c /Fo$@ /D ENTS_OUTPUT
ASM_FLAGS           = /nologo /W3 /WX /c /coff /Fo$@
LINK_FLAGS          = /NOLOGO /SUBSYSTEM:CONSOLE /IGNORE:4086 /MAP /OPT:REF
LIB_FLAGS           = /NOLOGO

#
# Set additional build flags for compiler/assembler/linker when debug is enabled.
# We'll always build the build tools with debug turned on so we can debug the
# tool if something fails.
#
#!IF "$(EFI_DEBUG)" == "YES"
ASM_FLAGS       = $(ASM_FLAGS) /Zi /DDEBUG
CC_FLAGS        = $(CC_FLAGS) /Zi /Gm
LINK_FLAGS      = $(LINK_FLAGS) /DEBUG
#!ENDIF

#
# These are typically set by the vsvars32.bat file that is created when Visual Studio
# is installed.
#
!IFNDEF VCINSTALLDIR
VCINSTALLDIR=C:\Program Files\Microsoft Visual Studio .NET 2003
!ENDIF

INC = -I $(EDK_SOURCE)\Foundation                          \
      -I $(EDK_SOURCE)\Foundation\Efi                      \
      -I $(EDK_SOURCE)\Foundation\Framework                \
      -I $(EDK_SOURCE)\Foundation\Core\Dxe                 \
      -I $(EDK_SOURCE)\Foundation\Include                  \
      -I $(EDK_SOURCE)\Foundation\Efi\Include              \
      -I $(EDK_SOURCE)\Foundation\Framework\Include        \
      -I $(EDK_SOURCE)\Foundation\Include\IndustryStandard \
      -I $(EDK_SOURCE)\Foundation\Include\Ia32             \
      -I $(EDK_SOURCE)\Foundation\Include\Pei              \
      -I $(EDK_SOURCE)\Foundation\Library\Pei\Include      \
      -I $(EDK_SOURCE)\Sample\Include                      \
      -I "$(EDK_TOOLS_COMMON)"

#
# Why?
#
INC = $(INC) -I $(EDK_SOURCE)\Sample\Platform\Nt32

CUSTOMIZEDCOMPRESS_MAKEFILE = $(EDK_TOOLS_SOURCE)\CustomizedCompress\Makefile

CC_FLAGS = $(CC_FLAGS) $(INC)

#
# Set paths to libraries for linking
#
LIBPATH = /LIBPATH:"$(VCINSTALLDIR)\VC7\Lib"
LIBPATH = $(LIBPATH) /LIBPATH:"$(VCINSTALLDIR)\Vc7\PlatformSDK\Lib"

#
# For backwards compatibility with the build tools
#
LINK_FLAGS = $(LINK_FLAGS) $(LIBPATH)
MSVS_LINK_LIBPATHS = $(LIBPATH)
L_FLAGS = $(LINK_FLAGS)

# Should fix GenFvImage to not do a lib -- then we can remove this
LIB_FLAGS = $(LIB_FLAGS) $(LIBPATH)

EDK_TOOLS_DIR     = $(EDK_SOURCE)\Sample\Tools
EDK_TOOLS_SOURCE  = $(EDK_TOOLS_DIR)\Source
EDK_TOOLS_OUTPUT  = $(BUILD_DIR)\Tools
PCCTS_DIR         = $(EDK_SOURCE)\Other\Maintained\Tools\Pccts

TIANO_TOOLS_OUTPUT = $(EDK_TOOLS_OUTPUT)

#
# Make up some bogus stuff because the Tools makefile tries to copy whatever
#
EDK_TOOLS_BIN = c:\xxxxxxx
EFI_TOOLS_BIN = $(EDK_TOOLS_BIN)

###############################################################################
#
# Settings for using Intel EBC compiler and MS Visual Studio linker when
# building drivers for EBC.
#
###############################################################################
!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_INTEL_EBC"

#
# EBC_TOOLS_PATH should be defined above. Use the MS linker for link/lib
#
CC          = $(EBC_TOOLS_PATH)\Bin\Iec
LINK        = link
LIB         = link /lib

RC          = rc

CC_FLAGS    = -nologo -FAcs -c -W3 -WX
LINK_FLAGS  = /NOLOGO /MACHINE:EBC /OPT:REF /NODEFAULTLIB /BASE:0
LIB_FLAGS   = /NOLOGO /MACHINE:EBC

#
# For source-level debug support
#
!IF "$(EFI_DEBUG)" == "YES"
CC_FLAGS    = $(CC_FLAGS) /Zd /Zi
LINK_FLAGS  = $(LINK_FLAGS) /DEBUG
!ENDIF

CC_FLAGS = $(CC_FLAGS) $(INC)

###############################################################################
#
# Specify the path and macros for the x64 (also called x86-64, EM64T, AMD64) tools
#
###############################################################################
!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_MSDDK_X64"

CC                  = $(WIN_DDK_X64_PATH)\cl
LINK                = $(WIN_DDK_X64_PATH)\link
LIB                 = $(WIN_DDK_X64_PATH)\lib
ASM                 = $(WIN_DDK_X64_PATH)\ml64
ASMLINK             = $(WIN_DDK_X64_PATH)\link

RC                  = rc

CC_FLAGS            = /nologo /X /D EFIx64 /W4 /WX /Gy /c /Gs8192 /GS- /Fo$@ $(INC) /D ENTS_OUTPUT
ASM_FLAGS           = /nologo /W3 /WX /c /Fo$@ /DEFI32 $(INC)
LINK_FLAGS          = /NOLOGO /Machine:AMD64 /DLL /NODEFAULTLIB /OPT:REF /BASE:0
LIB_FLAGS           = /NOLOGO

#
# Set additional build flags for compiler/assembler/linker when debug is enabled
#
!IF "$(EFI_DEBUG)" == "YES"
ASM_FLAGS       = $(ASM_FLAGS) /Zi /DDEBUG
CC_FLAGS        = $(CC_FLAGS) /Zi /Gm /D EFI_DEBUG
LINK_FLAGS      = $(LINK_FLAGS) /DEBUG
!ENDIF

###############################################################################
#
# Microsoft DDK toolchain for IPF targets
#
###############################################################################
!ELSEIF "$(TOOLCHAIN)" == "TOOLCHAIN_MSDDK_IPF"
#
# Define executables for IPF builds
#
CC                = $(WIN_DDK_IPF_PATH)\cl
LINK              = $(WIN_DDK_IPF_PATH)\link
LIB               = $(WIN_DDK_IPF_PATH)\lib
ASM               = $(WIN_DDK_IPF_PATH)\ias
ASMLINK           = $(WIN_DDK_IPF_PATH)\link

RC                  = rc

#
# Define build flags for IPF driver builds
#
CC_FLAGS              = /nologo /X /W4 /WX /GX /GS- /Gy /c /Fo$@ /D EFI_MONOSHELL /D EFI64 $(INC) /D ENTS_OUTPUT
ASM_FLAGS             = -N us -X explicit -M ilp64 -N so -W4 -o $@ $(INC)
LINK_FLAGS            = /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB /IGNORE:4086 /MAP /OPT:REF /MACHINE:IA64 /DLL /BASE:0
LIB_FLAGS             = /NOLOGO
ASL_CPP_FLAGS         = /nologo /C /EP /TC $(INC)
#
# For additional compiler debug output files
#
#CC_FLAGS             = $(CC_FLAGS) /Fa$* /FAsc /Fo$@ /FR$(@R).SBR
#
# This is used for preprocessing IPF Assembly files
#
CC_PP_FLAGS       = -EP -C $(CC_FLAGS)

!IF "$(EFI_DEBUG)" == "YES"
ASM_FLAGS       = $(ASM_FLAGS) -d debug
CC_FLAGS        = $(CC_FLAGS) /Zi /Gm
LINK_FLAGS      = $(LINK_FLAGS) /DEBUG
!ENDIF

###############################################################################
#
# Undefined/other toolchains
#
###############################################################################
!ELSE
#
# The main platform makefile may include this file without setting the
# toolchain, which is ok. However if it is set, and we're here, then
# it's not supported.
#
!IF "$(TOOLCHAIN)" != ""
!ERROR Toolchain $(TOOLCHAIN) not supported by PlatformTools.env
!ENDIF
!ENDIF

#
# These are standard build options
#
VERSION_FLAGS    = /D EFI_SPECIFICATION_VERSION=$(EFI_SPECIFICATION_VERSION) /D TIANO_RELEASE_VERSION=$(TIANO_RELEASE_VERSION)
CC_FLAGS         = $(CC_FLAGS) $(VERSION_FLAGS)

!IF "$(TOOLCHAIN)" == "TOOLCHAIN_MSDDK_IPF"
#
!ELSE
ASM_FLAGS = $(ASM_FLAGS) $(VERSION_FLAGS)
!ENDIF


#
# For backward compatibility
#
C_FLAGS         = $(CC_FLAGS)

#
# For backward compatability with *.inf files that change flags
#
CC_FLAGS = $(CC_FLAGS) $(C_STD_FLAGS) $(C_PROJ_FLAGS)

###############################################################################
#
# define EFI specification denpendant driver files
#
###############################################################################
!IF "$(EFI_SPECIFICATION_VERSION)" >= "0x00020000"
UEFI_MODE = YES
!ELSE
UEFI_MODE = NO
!ENDIF

!IF "$(UEFI_MODE)" == "YES"
UEFI_PREFIX = Uefi
EFI_COMPLIANT_BB_TEST_INF = Platform\$(PROJECT_FAMILY)\TestCase\UEFI\EFI\Generic\EfiCompliant\BlackBoxTest\EfiCompliantBbTest_uefi.inf
EVENT_TIMER_TASK_PRIORITY_SERVICES_BB_TEST_INF = Platform\$(PROJECT_FAMILY)\TestCase\UEFI\EFI\BootServices\EventTimerTaskPriorityServices\BlackBoxTest\EventTimerTaskPriorityServicesBBTest_uefi.inf
SIMPLE_TEXT_OUT_BB_TEST_INF = Platform\$(PROJECT_FAMILY)\TestCase\UEFI\EFI\Protocol\SimpleTextOut\BlackBoxTest\SimpleTextOutBBTest_uefi.inf
IHV_SIMPLE_TEXT_OUT_BB_TEST_INF = Platform\$(PROJECT_FAMILY)\TestCase\UEFI\IHV\Protocol\SimpleTextOut\BlackBoxTest\IhvSimpleTextOutBBTest_uefi.inf
DEVICE_PATH_UTILITIES_BB_TEST_INF = Platform\IntelTest\TestCase\UEFI\EFI\Protocol\DevicePathUtilities\BlackBoxTest\DevicePathUtilitiesBBTest.inf
DEVICE_PATH_TO_TEXT_BB_TEST_INF = Platform\IntelTest\TestCase\UEFI\EFI\Protocol\DevicePathToText\BlackBoxTest\DevicePathToTextBBTest.inf
DEVICE_PATH_FROM_TEXT_BB_TEST_INF = Platform\IntelTest\TestCase\UEFI\EFI\Protocol\DevicePathFromText\BlackBoxTest\DevicePathFromTextBBTest.inf
!ELSE
UEFI_PREFIX =
EFI_COMPLIANT_BB_TEST_INF = Platform\$(PROJECT_FAMILY)\TestCase\UEFI\EFI\Generic\EfiCompliant\BlackBoxTest\EfiCompliantBbTest_efi.inf
EVENT_TIMER_TASK_PRIORITY_SERVICES_BB_TEST_INF = Platform\$(PROJECT_FAMILY)\TestCase\UEFI\EFI\BootServices\EventTimerTaskPriorityServices\BlackBoxTest\EventTimerTaskPriorityServicesBBTest_efi.inf
SIMPLE_TEXT_OUT_BB_TEST_INF = Platform\$(PROJECT_FAMILY)\TestCase\UEFI\EFI\Protocol\SimpleTextOut\BlackBoxTest\SimpleTextOutBBTest_efi.inf
IHV_SIMPLE_TEXT_OUT_BB_TEST_INF = Platform\$(PROJECT_FAMILY)\TestCase\UEFI\IHV\Protocol\SimpleTextOut\BlackBoxTest\IhvSimpleTextOutBBTest_efi.inf
DEVICE_PATH_UTILITIES_BB_TEST_INF =
DEVICE_PATH_TO_TEXT_BB_TEST_INF   =
DEVICE_PATH_FROM_TEXT_BB_TEST_INF =
!ENDIF
